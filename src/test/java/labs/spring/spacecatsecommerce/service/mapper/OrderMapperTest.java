package labs.spring.spacecatsecommerce.service.mapper;

import labs.spring.spacecatsecommerce.domain.order.Order;
import labs.spring.spacecatsecommerce.domain.order.OrderEntry;
import labs.spring.spacecatsecommerce.dto.order.OrderDto;
import labs.spring.spacecatsecommerce.dto.order.OrderEntryDto;
import labs.spring.spacecatsecommerce.repository.entity.CustomerEntity;
import labs.spring.spacecatsecommerce.repository.entity.OrderEntity;
import labs.spring.spacecatsecommerce.repository.entity.OrderEntryEntity;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

class OrderMapperTest {

    private OrderMapper orderMapper;

    @BeforeEach
    void setUp() {
        orderMapper = new OrderMapperImpl(); // Assuming OrderMapperImpl is generated by MapStruct
    }

    @Test
    void toOrderEntry_ShouldMapOrderEntryEntityToOrderEntry() {
        OrderEntryEntity orderEntryEntity = new OrderEntryEntity();
        orderEntryEntity.setId(1L);
        orderEntryEntity.setProductCode(1L);
        orderEntryEntity.setQuantity(3);
        orderEntryEntity.setPrice(20.0);

        OrderEntry orderEntry = orderMapper.toOrderEntry(orderEntryEntity);

        assertThat(orderEntry).isNotNull();
        assertThat(orderEntry.getId()).isEqualTo(orderEntryEntity.getId());
        assertThat(orderEntry.getProductCode()).isEqualTo(orderEntryEntity.getProductCode());
        assertThat(orderEntry.getQuantity()).isEqualTo(orderEntryEntity.getQuantity());
        assertThat(orderEntry.getPrice()).isEqualTo(orderEntryEntity.getPrice());
    }

    @Test
    void toOrderEntryEntity_ShouldMapOrderEntryToOrderEntryEntity() {
        OrderEntry orderEntry = OrderEntry.builder()
                .productCode(1L)
                .quantity(1)
                .price(150.0)
                .build();

        OrderEntryEntity orderEntryEntity = orderMapper.toOrderEntryEntity(orderEntry);

        assertThat(orderEntryEntity).isNotNull();
        assertThat(orderEntryEntity.getId()).isEqualTo(orderEntry.getId());
        assertThat(orderEntryEntity.getProductCode()).isEqualTo(orderEntry.getProductCode());
        assertThat(orderEntryEntity.getQuantity()).isEqualTo(orderEntry.getQuantity());
        assertThat(orderEntryEntity.getPrice()).isEqualTo(orderEntry.getPrice());
    }

    @Test
    void toOrderDto_ShouldMapOrderEntityToOrderDto() {
        OrderEntity orderEntity = new OrderEntity();
        orderEntity.setId(1L);
        orderEntity.setTotalPrice(200.0);

        CustomerEntity customerEntity = new CustomerEntity();
        customerEntity.setId(1L);
        orderEntity.setCustomer(customerEntity);

        OrderEntryEntity entryEntity = new OrderEntryEntity();
        entryEntity.setProductCode(1L);
        entryEntity.setQuantity(2);
        entryEntity.setPrice(100.0);
        orderEntity.setEntries(List.of(entryEntity));

        OrderDto orderDto = orderMapper.toOrderDto(orderEntity);

        assertThat(orderDto).isNotNull();
        assertThat(orderDto.getId()).isEqualTo(orderEntity.getId());
        assertThat(orderDto.getCustomerId()).isEqualTo(orderEntity.getCustomer().getId());
        assertThat(orderDto.getEntries()).hasSize(1);
        assertThat(orderDto.getTotalPrice()).isEqualTo(orderEntity.getTotalPrice());
    }

    @Test
    void mapCustomerIdToEntity_ShouldReturnCorrectCustomerEntity() {
        CustomerEntity customerEntity = orderMapper.mapCustomerIdToEntity(1L);
        assertThat(customerEntity).isNotNull();
        assertThat(customerEntity.getId()).isEqualTo(1L);
    }

    @Test
    void mapCustomerIdToEntity_NullInput_ShouldReturnNull() {
        CustomerEntity customerEntity = orderMapper.mapCustomerIdToEntity(null);
        assertThat(customerEntity).isNull();
    }
}
